<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 算法 | flyniu's blog]]></title>
  <link href="http://flyniu.github.io/blog/categories/suan-fa/atom.xml" rel="self"/>
  <link href="http://flyniu.github.io/"/>
  <updated>2016-10-06T22:24:50+08:00</updated>
  <id>http://flyniu.github.io/</id>
  <author>
    <name><![CDATA[Niu Zijian]]></name>
    <email><![CDATA[niuzijian1@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[algo]]></title>
    <link href="http://flyniu.github.io/blog/2016/09/25/algo/"/>
    <updated>2016-09-25T19:14:00+08:00</updated>
    <id>http://flyniu.github.io/blog/2016/09/25/algo</id>
    <content type="html"><![CDATA[<p>常用算法的总结</p>

<!--more-->


<h1>分治</h1>

<p>在排序算法中，快速排序和归并排血都用到了分治的思想，所谓分治就是分而治之，再利用递归，将一份比较大的任务分成若干个小任务去完成。</p>

<h2>快速排序</h2>

<p>快速排序，采用了挖坑填坑的方法来完成每一趟排序，每一次小排序后都会分成左边一组和右边一组，分别小于和大于一个分界数（一般是数组第一个数字）再分别对这两组进行排序。相当于对左右两组分而置之，直到完成排序。</p>

<pre><code class="java adjustarray(每一趟排序的函数)">    private static int adjustarray(int[] array,int l,int r) {
        int i=l;//l和r分别是数组的左指针和右指针
        int j=r;//将其赋给i，j，进行指针的移动
        while(i&lt;j){
        while(i&lt;j &amp;&amp; array[j]&gt;=array[l]){
            j--;
        }
        if(i&lt;j){
            array[i]=array[j];
            i++;
        }//先是右指针向左移动找到比临界值小的数，填入上一个坑中
        while(i&lt;j &amp;&amp; array[i]&lt;=array[l]){
            i++;
        }
        if(i&lt;j){
            array[j]=array[i];
            j--;
        }//接着左指针向右移动找到比临界值大的数，填入上一个坑中

        }   
        array[j]=array[l];//最后把临界值的数填入i=j也就是临街位置的坑中，该值不会再改变
        return i;
    }
</code></pre>

<p>接下来是quick_sort的主调用函数</p>

<pre><code class="java quick_sort">    prviate static void quick_sort(int[] array,int l,int r) {
        if(l&lt;r){
        int mid = adjustarray(array,l,r);
        for(int i=0;i&lt;r;i++){
            System.out.print(array[i]+" ");
        }
        System.out.println();
        quick_sort(array,l,mid-1);
        quick_sort(array,mid+1,r);
        }
        //这个函数就是分治思想的函数，思想明白了这个函数也就没有什么不能理解的了
    }
</code></pre>

<h2>归并排序</h2>

<p>归并排序是先分再和的思想，其重点和难点是在和（merge）的函数上，对一趟数组，先将其按中间数字的数值等分为左右两部分，比其小的在左，大的在右（从小到大的顺序），直到其为一个数字，相对有序之后，接着进行合并，将数组两两形成有序数组。</p>

<pre><code class="java merge操作">private static void merge(int[] array,int l,int mid,int r){
    int temp[] = new int[r-l+1];//创建一个临时数组用来承接两个数组合并后的结果
    int i=l;
    int j=mid+1;
    while(i&lt;=mid &amp;&amp; j&lt;=r){//比较左右两个数组元素大小，按大小顺序重新排序在临时数组中
        if(array[i]&lt;array[j]){
                temp[k++] = array[i++];
            }
            else{
                temp[k++] = array[j++];
            }
    }
        while(i&lt;=mid){
            temp[k++] = array[i++];
        }
        while(j&lt;=r){
            temp[k++] = array[j++];     
        }
        for(int k1 = 0 ; k1&lt;temp.length;k1++){//将数组还给ararry
            array[k1+l] = temp[k1];
        }
}
</code></pre>

<p>接下来是主调用函数 依然是采用了分治的思想</p>

<pre><code class="java merge_sort">    private static void merge_sort(int[] array, int l, int r) {
        int mid = (l+r)/2;
        if(l&lt;r){//分治思想
        merge_sort(array,l,mid);//将左边有序（直到一个元素）
        merge_sort(array,mid+1,r);//使右边有序（直到一个元素）
        merge(array,l,mid,r);//合并
        }
    }
</code></pre>

<h1>动态规划</h1>

<h2>跳石板问题 &amp;&amp; 背包问题</h2>

<h3>跳石板问题：</h3>

<p>小易来到了一条石板路前，每块石板上从1挨着编号为：1、2、3…….
这条石板路要根据特殊的规则才能前进：对于小易当前所在的编号为K的 石板，小易单次只能往前跳K的一个约数(不含1和K)步，即跳到K+X(X为K的一个非1和本身的约数)的位置。 小易当前处在编号为N的石板，他想跳到编号恰好为M的石板去，小易想知道最少需要跳跃几次可以到达。
例如：
N = 4，M = 24：
4->6->8->12->18->24
于是小易最少需要跳跃5次，就可以从4号石板跳到24号石板
输入描述:
输入为一行，有两个整数N，M，以空格隔开。
(4 ≤ N ≤ 100000)
(N ≤ M ≤ 100000)</p>

<p>输出描述:
输出小易最少需要跳跃的步数,如果不能到达输出-1</p>

<p>输入例子:
4 24</p>

<p>输出例子:
5</p>

<p>这道题可以采用动态规划的思想,规划的量是从起点到每一个点的最小的距离。因为每一个点往前前进的步数只能是他的约数，那么到下一个点为这个点加上他的一个约数，所以从起点到这个点的最短距离就是取 上个点的最小距离+1 或者是到这个点的最小距离 中的最小值。
每个点的最短距离设为dp[i] x为i的约数  那么 dp【i+x】 = Math.min(dp[i+x],dp[i]+1)</p>

<pre><code class="java 跳石板问题">
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while(scanner.hasNext()){
            int from = scanner.nextInt();
            int to = scanner.nextInt();
            int result = calresult(from,to);
            System.out.println(result);
        }
 }  

    private static int calresult(int from, int to) {
        if(from == to){
            return 0;
        }
        int[] dp = new int[to-from+1]; //将规划的量存为dp数组内
        int step = to-from+1;
        dp[0] = 0;                      
        for(int i=1;i&lt;step;i++){
            dp[i] = Integer.MAX_VALUE;
        }
        for(int i=0;i&lt;step;i++){
            if(dp[i] == Integer.MAX_VALUE){
                dp[i]=0;    
                continue;
            }

            ArrayList&lt;Integer&gt; list = getyinshu(i + from);//求因数的函数

            for (int j = 0; j &lt; list.size(); j++) {
                int x = list.get(j);                               
                if(i+from+x&lt;=to){
                    dp[i+x] = Math.min(dp[i+x], dp[i]+1);//整个算法的关键，将这个语句弄懂这个算法显得十分简单              
                }
            }

        }
        if(dp[to-from] == 0){
            return -1;
        }else{
            return dp[to-from];
        }
    }
    private static ArrayList&lt;Integer&gt; getyinshu(int num) {//求因数的函数
        ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
        for(int i=2;i&lt;=Math.sqrt(num);i++){
            if(num%i==0){
                list.add(i);
                if(num/i!=i){//注意这里在写程序的时候出错了，排除其平方数的情况
                    list.add(num/i);
                }
            }

        }
        return list;
    }
</code></pre>

<h3>背包问题</h3>

<p>题目描述：</p>

<p>有编号分别为a,b,c,d,e的五件物品，它们的重量分别是2,2,6,5,4，它们的价值分别是6,3,5,4,6，现在给你个承重为10的背包，如何让背包里装入的物品具有最大的价值总和？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉树]]></title>
    <link href="http://flyniu.github.io/blog/2016/05/26/hello/"/>
    <updated>2016-05-26T18:49:00+08:00</updated>
    <id>http://flyniu.github.io/blog/2016/05/26/hello</id>
    <content type="html"><![CDATA[<p>二叉树三种遍历总是记不住，希望写一遍以后能够记下。。</p>

<!--more-->


<ul>
<li>先序：父先</li>
<li>中序：父中</li>
<li>后序：父后</li>
</ul>


<p>已知中序和后序或者中序和先序序列事都可以重构出该二叉树，这也是常见的编程实现题目。</p>

<p>以先序和中序为例构建二叉树的java实现：</p>

<p>定义二叉树：</p>

<pre><code class="java this is a java www.baidu.com link">//TreeNode.java
public class TreeNode {
         int val;
         TreeNode left;
         TreeNode right;
         TreeNode(int x) { val = x; }       
}
</code></pre>

<p>实现算法</p>

<pre><code class="">//solution.java
public class solution {
    public static void main(String [] args){
        int pre[] ={1,2,4,7,3,5,6,8};
        int in[] = {4,7,2,1,5,3,8,6};
        TreeNode tree = reConstructBinaryTree(pre, in);
        postTraverse(tree);
}

    public static TreeNode reConstructBinaryTree(int[] pre, int[] in) {
        int lengthpre = pre.length;
        int lengthin = pre.length;
        if (lengthin != lengthpre)
            return null;
        TreeNode tree = new TreeNode(pre[0]);
        tree.left = null;
        tree.right = null;
        if (lengthin == 1)
            return tree;
        int i;
        for (i = 0; i &lt; lengthin; i++) {
            if (tree.val == in[i])
                break;
        }
        if (i &gt; 0) {
            int leftin[] = new int[i];
            int leftpre[] = new int[i];
            for (int j = 0; j &lt; i; j++) {
                leftin[j] = in[j];
                leftpre[j] = pre[j + 1];
            }
            tree.left = reConstructBinaryTree(leftpre, leftin);
        }
        if (i &lt; lengthin - 1) {
            int rightin[] = new int[lengthin - i - 1];
            int rightpre[] = new int[lengthin - i - 1];
            for (int j = 0; j &lt; lengthin - i - 1; j++) {
                rightin[j] = in[j + i + 1];
                rightpre[j] = pre[j + 1 + i];
            }
            tree.right = reConstructBinaryTree(rightpre, rightin);
        }
        return tree;
    }

    public static void postTraverse(TreeNode tree) {
        if (tree.left != null)
            postTraverse(tree.left);
        if (tree.right != null)
            postTraverse(tree.right);
        System.out.print(tree.val+" ");
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
