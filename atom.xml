<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[flyniu's blog]]></title>
  <link href="http://flyniu.github.io/atom.xml" rel="self"/>
  <link href="http://flyniu.github.io/"/>
  <updated>2016-09-28T11:17:49+08:00</updated>
  <id>http://flyniu.github.io/</id>
  <author>
    <name><![CDATA[Niu Zijian]]></name>
    <email><![CDATA[niuzijian1@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[algo]]></title>
    <link href="http://flyniu.github.io/blog/2016/09/25/algo/"/>
    <updated>2016-09-25T19:14:00+08:00</updated>
    <id>http://flyniu.github.io/blog/2016/09/25/algo</id>
    <content type="html"><![CDATA[<p>常用算法的总结</p>

<!--more-->


<h1>分治</h1>

<p>在排序算法中，快速排序和归并排血都用到了分治的思想，所谓分治就是分而治之，再利用递归，将一份比较大的任务分成若干个小任务去完成。</p>

<h2>快速排序</h2>

<p>快速排序，采用了挖坑填坑的方法来完成每一趟排序，每一次小排序后都会分成左边一组和右边一组，分别小于和大于一个分界数（一般是数组第一个数字）再分别对这两组进行排序。相当于对左右两组分而置之，直到完成排序。</p>

<figure class='code'><figcaption><span>adjustarray(每一趟排序的函数)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">adjustarray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span><span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">l</span><span class="o">;</span><span class="c1">//l和r分别是数组的左指针和右指针</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">r</span><span class="o">;</span><span class="c1">//将其赋给i，j，进行指针的移动</span>
</span><span class='line'>  <span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="o">){</span>
</span><span class='line'>  <span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]&gt;=</span><span class="n">array</span><span class="o">[</span><span class="n">l</span><span class="o">]){</span>
</span><span class='line'>      <span class="n">j</span><span class="o">--;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="o">){</span>
</span><span class='line'>      <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>      <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>  <span class="o">}</span><span class="c1">//先是右指针向左移动找到比临界值小的数，填入上一个坑中</span>
</span><span class='line'>  <span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;=</span><span class="n">array</span><span class="o">[</span><span class="n">l</span><span class="o">]){</span>
</span><span class='line'>      <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">j</span><span class="o">){</span>
</span><span class='line'>      <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]=</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>      <span class="n">j</span><span class="o">--;</span>
</span><span class='line'>  <span class="o">}</span><span class="c1">//接着左指针向右移动找到比临界值大的数，填入上一个坑中</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">}</span>    
</span><span class='line'>  <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]=</span><span class="n">array</span><span class="o">[</span><span class="n">l</span><span class="o">];</span><span class="c1">//最后把临界值的数填入i=j也就是临街位置的坑中，该值不会再改变</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来是quick_sort的主调用函数</p>

<figure class='code'><figcaption><span>quick_sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">prviate</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">quick_sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span><span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="o">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">adjustarray</span><span class="o">(</span><span class="n">array</span><span class="o">,</span><span class="n">l</span><span class="o">,</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">r</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>  <span class="n">quick_sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span><span class="n">l</span><span class="o">,</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">quick_sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">//这个函数就是分治思想的函数，思想明白了这个函数也就没有什么不能理解的了</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>归并排序</h2>

<p>归并排序是先分再和的思想，其重点和难点是在和（merge）的函数上，对一趟数组，先将其按中间数字的数值等分为左右两部分，比其小的在左，大的在右（从小到大的顺序），直到其为一个数字，相对有序之后，接着进行合并，将数组两两形成有序数组。</p>

<figure class='code'><figcaption><span>merge操作</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span><span class="kt">int</span> <span class="n">mid</span><span class="o">,</span><span class="kt">int</span> <span class="n">r</span><span class="o">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">temp</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span><span class="c1">//创建一个临时数组用来承接两个数组合并后的结果</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">l</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">r</span><span class="o">){</span><span class="c1">//比较左右两个数组元素大小，按大小顺序重新排序在临时数组中</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]&lt;</span><span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]){</span>
</span><span class='line'>              <span class="n">temp</span><span class="o">[</span><span class="n">k</span><span class="o">++]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">++];</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">else</span><span class="o">{</span>
</span><span class='line'>              <span class="n">temp</span><span class="o">[</span><span class="n">k</span><span class="o">++]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">++];</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">mid</span><span class="o">){</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">[</span><span class="n">k</span><span class="o">++]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">++];</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">r</span><span class="o">){</span>
</span><span class='line'>          <span class="n">temp</span><span class="o">[</span><span class="n">k</span><span class="o">++]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">++];</span>      
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">k1</span><span class="o">&lt;</span><span class="n">temp</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">k1</span><span class="o">++){</span><span class="c1">//将数组还给ararry</span>
</span><span class='line'>          <span class="n">array</span><span class="o">[</span><span class="n">k1</span><span class="o">+</span><span class="n">l</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">[</span><span class="n">k1</span><span class="o">];</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来是主调用函数 依然是采用了分治的思想</p>

<figure class='code'><figcaption><span>merge_sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge_sort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="o">){</span><span class="c1">//分治思想</span>
</span><span class='line'>  <span class="n">merge_sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span><span class="n">l</span><span class="o">,</span><span class="n">mid</span><span class="o">);</span><span class="c1">//将左边有序（直到一个元素）</span>
</span><span class='line'>  <span class="n">merge_sort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">r</span><span class="o">);</span><span class="c1">//使右边有序（直到一个元素）</span>
</span><span class='line'>  <span class="n">merge</span><span class="o">(</span><span class="n">array</span><span class="o">,</span><span class="n">l</span><span class="o">,</span><span class="n">mid</span><span class="o">,</span><span class="n">r</span><span class="o">);</span><span class="c1">//合并</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java-mvc]]></title>
    <link href="http://flyniu.github.io/blog/2016/09/19/java-mvc/"/>
    <updated>2016-09-19T19:14:00+08:00</updated>
    <id>http://flyniu.github.io/blog/2016/09/19/java-mvc</id>
    <content type="html"><![CDATA[<p>对javaMVC终于有了一点自己的理解。</p>

<!--more-->


<p>所谓MVC 模型 视图和控制器，就是一种将数据显示和业务逻辑分开编写的一种设计思想。的确把整个逻辑设计代码写在一个jsp页面中是一件恶心并影响效率的事情。将业务逻辑代码聚集到一个部件里面，再被数据显示界面所调用，这样代码可移植性和效率都大大增加。</p>

<p>用一个显示新闻详情页的例子来展示一下：
创建一个详情页 detail.jsp</p>

<figure class='code'><figcaption><span>detail.jsp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;%</span><span class="nd">@page</span> <span class="n">import</span><span class="o">=</span><span class="s">&quot;com.entity.Artical&quot;</span><span class="o">%&gt;</span>
</span><span class='line'><span class="o">&lt;%</span><span class="err">@</span> <span class="n">page</span> <span class="n">language</span><span class="o">=</span><span class="s">&quot;java&quot;</span> <span class="n">import</span><span class="o">=</span><span class="s">&quot;java.util.*&quot;</span> <span class="n">pageEncoding</span><span class="o">=</span><span class="s">&quot;utf-8&quot;</span><span class="o">%&gt;</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'><span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">();</span>
</span><span class='line'><span class="n">String</span> <span class="n">basePath</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getScheme</span><span class="o">()+</span><span class="s">&quot;://&quot;</span><span class="o">+</span><span class="n">request</span><span class="o">.</span><span class="na">getServerName</span><span class="o">()+</span><span class="s">&quot;:&quot;</span><span class="o">+</span><span class="n">request</span><span class="o">.</span><span class="na">getServerPort</span><span class="o">()+</span><span class="n">path</span><span class="o">+</span><span class="s">&quot;/&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">Artical</span> <span class="n">artical</span> <span class="o">=</span> <span class="o">(</span><span class="n">Artical</span><span class="o">)</span><span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;artical&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">artical</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
</span><span class='line'>  <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">&quot;index.jsp&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!</span><span class="n">DOCTYPE</span> <span class="n">HTML</span> <span class="n">PUBLIC</span> <span class="s">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">base</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&lt;%=basePath%&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="s">&quot;详情页&quot;</span><span class="o">&lt;/</span><span class="n">title</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">meta</span> <span class="n">http</span><span class="o">-</span><span class="n">equiv</span><span class="o">=</span><span class="s">&quot;pragma&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s">&quot;no-cache&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">meta</span> <span class="n">http</span><span class="o">-</span><span class="n">equiv</span><span class="o">=</span><span class="s">&quot;cache-control&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s">&quot;no-cache&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">meta</span> <span class="n">http</span><span class="o">-</span><span class="n">equiv</span><span class="o">=</span><span class="s">&quot;expires&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s">&quot;0&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">meta</span> <span class="n">http</span><span class="o">-</span><span class="n">equiv</span><span class="o">=</span><span class="s">&quot;keywords&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s">&quot;keyword1,keyword2,keyword3&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">meta</span> <span class="n">http</span><span class="o">-</span><span class="n">equiv</span><span class="o">=</span><span class="s">&quot;description&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s">&quot;This is my page&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">link</span> <span class="n">rel</span><span class="o">=</span><span class="s">&quot;stylesheet&quot;</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;text/css&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&lt;%=basePath%&gt;css/admin.css&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nl">jsp:</span><span class="n">include</span> <span class="n">page</span><span class="o">=</span><span class="s">&quot;top.jsp&quot;</span><span class="o">&gt;&lt;/</span><span class="nl">jsp:</span><span class="n">include</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nl">jsp:</span><span class="n">include</span> <span class="n">page</span><span class="o">=</span><span class="s">&quot;nav.jsp&quot;</span><span class="o">&gt;&lt;/</span><span class="nl">jsp:</span><span class="n">include</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;w&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">h1</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;title&quot;</span><span class="o">&gt;&lt;%=</span><span class="n">artical</span><span class="o">.</span><span class="na">getArtical_title</span><span class="o">()</span> <span class="o">%&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">p</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;data&quot;</span><span class="o">&gt;</span><span class="n">发表日期</span><span class="err">：</span><span class="o">&lt;%=</span><span class="n">artical</span><span class="o">.</span><span class="na">getArtical_date</span><span class="o">()</span> <span class="o">%&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;content&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;%=</span><span class="n">artical</span><span class="o">.</span><span class="na">getArtical_content</span><span class="o">()</span> <span class="o">%&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;footer1&quot;</span><span class="o">&gt;&lt;</span><span class="n">center</span><span class="o">&gt;&lt;</span><span class="n">h5</span><span class="o">&gt;</span><span class="mf">7.20</span><span class="o">&lt;/</span><span class="n">h5</span><span class="o">&gt;&lt;/</span><span class="n">center</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在创建一个用来控制业务流程的servlet,在他的doget方法中通过访问数据库获得其相应的文章标题和文章详情等数据，通过
request.getRequestDispatcher(&ldquo;detail.jsp&rdquo;).forward(request, response);语句发送给detail.jsp</p>

<p>并且把该servlet的映射关系 写成item.html
通过每篇文章的&lt;a></p>

<p>标签来调用这个servlet</p>

<figure class='code'><figcaption><span>a标签</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;item.html?artical_id=&lt;%=artical.getArtical_id() %&gt;&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;&lt;%=artical.getArtical_id()%&gt;&quot;</span><span class="o">&gt;&lt;%=</span><span class="n">artical</span><span class="o">.</span><span class="na">getArtical_title</span><span class="o">()</span> <span class="o">%&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>detailservlet.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>
</span><span class='line'>          <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sqlHelper</span> <span class="n">sql</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">sqlHelper</span><span class="o">();</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">Nav</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">sql</span><span class="o">.</span><span class="na">queryallnav</span><span class="o">();</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">artical_id</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;artical_id&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">artical_id</span><span class="o">==</span><span class="kc">null</span><span class="o">||</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">artical_id</span><span class="o">)){</span>
</span><span class='line'>              <span class="n">response</span><span class="o">.</span><span class="na">sendRedirect</span><span class="o">(</span><span class="s">&quot;index.html&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="k">return</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">Artical</span> <span class="n">artical</span>  <span class="o">=</span> <span class="n">sql</span><span class="o">.</span><span class="na">queryarticalbyid</span><span class="o">(</span><span class="n">artical_id</span><span class="o">);</span>
</span><span class='line'>          <span class="n">sql</span><span class="o">.</span><span class="na">destroy</span><span class="o">();</span>
</span><span class='line'>          <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;artical&quot;</span><span class="o">,</span> <span class="n">artical</span><span class="o">);</span>
</span><span class='line'>          <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;navlist&quot;</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
</span><span class='line'>          <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="s">&quot;detail.jsp&quot;</span><span class="o">).</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就是一个最简单的mvc模式，希望为今后学习MVC框架打下基础。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉树]]></title>
    <link href="http://flyniu.github.io/blog/2016/05/26/hello/"/>
    <updated>2016-05-26T18:49:00+08:00</updated>
    <id>http://flyniu.github.io/blog/2016/05/26/hello</id>
    <content type="html"><![CDATA[<p>二叉树三种遍历总是记不住，希望写一遍以后能够记下。。</p>

<!--more-->


<ul>
<li>先序：父先</li>
<li>中序：父中</li>
<li>后序：父后</li>
</ul>


<p>已知中序和后序或者中序和先序序列事都可以重构出该二叉树，这也是常见的编程实现题目。</p>

<p>以先序和中序为例构建二叉树的java实现：</p>

<p>定义二叉树：</p>

<figure class='code'><figcaption><span>this is a java www.baidu.com link</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//TreeNode.java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TreeNode</span> <span class="o">{</span>
</span><span class='line'>       <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
</span><span class='line'>       <span class="n">TreeNode</span> <span class="n">left</span><span class="o">;</span>
</span><span class='line'>       <span class="n">TreeNode</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>       <span class="n">TreeNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span> <span class="n">val</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span> <span class="o">}</span>     
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现算法</p>

<figure class='code'><figcaption><span>this is a java www.baidu.com link</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//solution.java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">solution</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">pre</span><span class="o">[]</span> <span class="o">={</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">8</span><span class="o">};</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">in</span><span class="o">[]</span> <span class="o">=</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">6</span><span class="o">};</span>
</span><span class='line'>      <span class="n">TreeNode</span> <span class="n">tree</span> <span class="o">=</span> <span class="n">reConstructBinaryTree</span><span class="o">(</span><span class="n">pre</span><span class="o">,</span> <span class="n">in</span><span class="o">);</span>
</span><span class='line'>      <span class="n">postTraverse</span><span class="o">(</span><span class="n">tree</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">TreeNode</span> <span class="nf">reConstructBinaryTree</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">pre</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">in</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">lengthpre</span> <span class="o">=</span> <span class="n">pre</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">lengthin</span> <span class="o">=</span> <span class="n">pre</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">lengthin</span> <span class="o">!=</span> <span class="n">lengthpre</span><span class="o">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">TreeNode</span> <span class="n">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TreeNode</span><span class="o">(</span><span class="n">pre</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">tree</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">tree</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">lengthin</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">tree</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lengthin</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">tree</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">in</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">leftin</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">leftpre</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">leftin</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">in</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>              <span class="n">leftpre</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">pre</span><span class="o">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">tree</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">reConstructBinaryTree</span><span class="o">(</span><span class="n">leftpre</span><span class="o">,</span> <span class="n">leftin</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">lengthin</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">rightin</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">lengthin</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">rightpre</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">lengthin</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">lengthin</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">rightin</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">in</span><span class="o">[</span><span class="n">j</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>              <span class="n">rightpre</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">pre</span><span class="o">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">i</span><span class="o">];</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">tree</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">reConstructBinaryTree</span><span class="o">(</span><span class="n">rightpre</span><span class="o">,</span> <span class="n">rightin</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">tree</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">postTraverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">tree</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">tree</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>          <span class="n">postTraverse</span><span class="o">(</span><span class="n">tree</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">tree</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>          <span class="n">postTraverse</span><span class="o">(</span><span class="n">tree</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">tree</span><span class="o">.</span><span class="na">val</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
